from common_imports import *
from semantic_union import *
from utils import *
from custom_langchain_tools import *


if __name__ == "__main__":
    
    os.environ["OPENAI_API"]=getpass("Enter the OpenAI API Key: ")
    os.environ["OPENAI_ORG"]=getpass("Enter the OpenAI ORG Key: ")

    APP_ID = 'com.spotify.music'
    APP_NAME = 'Spotify'

    # Load the app from file datas/api_result_appdescr_{APP_NAME}.json
    # This file is generated by the google_play_scraper in Google Colab
    # Cannot be generated here due to CERTIFICATE_VERIFY_FAILED error

    with open(f'datas/api_result_appdescr_{APP_NAME}.json', 'r') as f:
        loaded_api_result_app = json.load(f)
    loaded_api_result_app['title'] = APP_NAME

    """
    Alternative,

    loaded_api_result_app = fetch_app_description(APP_ID, APP_NAME)
    """

    # Generate the standardized app description
    # It takes the loaded_api_result_app dict generated by the google_play_scraper
    # It returns a dictionary with the standardized app description

    generic_raw_clusters = [
        'Bug Reports', 
        'Requesting for new features or limited feature', 
        'Issues related to Customer Support', 
        'Issues related to limited music options',
        'Issues related to premium features',
        'Issues related to Security and Privacy',
        ]
    general_descripion = "App reviews of a Music and Audio App"

    standard_app_description = generate_full_app_descritpion(
        api_result_app = loaded_api_result_app,
        generic_raw_clusters=generic_raw_clusters,
        general_descripion=general_descripion,
        multi_qry_count_per_label=10
        )
    
    """
    Alternative,

    standard_app_description = get_app_model(APP_ID, APP_NAME, generic_raw_clusters, general_descripion, 10)
    
    """
    
    # Store the standardized app description
    with open(f"datas/standard_app_description_{standard_app_description['name']}_v{0}.json", 'w') as f:
        json.dump(standard_app_description, f)